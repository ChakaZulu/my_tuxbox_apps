#include "setting_helpers.h"
#include "../global.h"


bool CColorSetupNotifier::changeNotify(string OptionName)
{
			//setting colors-..
			g_FrameBuffer->paletteGenFade(COL_MENUHEAD,
				convertSetupColor2RGB(g_settings.menu_Head_red, g_settings.menu_Head_green, g_settings.menu_Head_blue),
				convertSetupColor2RGB(g_settings.menu_Head_Text_red, g_settings.menu_Head_Text_green, g_settings.menu_Head_Text_blue),
				8, convertSetupAlpha2Alpha( g_settings.menu_Head_alpha ) );
			
			g_FrameBuffer->paletteGenFade(COL_MENUCONTENT,
				convertSetupColor2RGB(g_settings.menu_Content_red, g_settings.menu_Content_green, g_settings.menu_Content_blue),
				convertSetupColor2RGB(g_settings.menu_Content_Text_red, g_settings.menu_Content_Text_green, g_settings.menu_Content_Text_blue),
				8, convertSetupAlpha2Alpha(g_settings.menu_Content_alpha) );

			g_FrameBuffer->paletteGenFade(COL_MENUCONTENTSELECTED,
				convertSetupColor2RGB(g_settings.menu_Content_Selected_red, g_settings.menu_Content_Selected_green, g_settings.menu_Content_Selected_blue),
				convertSetupColor2RGB(g_settings.menu_Content_Selected_Text_red, g_settings.menu_Content_Selected_Text_green, g_settings.menu_Content_Selected_Text_blue),
				8, convertSetupAlpha2Alpha(g_settings.menu_Content_Selected_alpha) );

			g_FrameBuffer->paletteGenFade(COL_MENUCONTENTINACTIVE,
				convertSetupColor2RGB(g_settings.menu_Content_inactive_red, g_settings.menu_Content_inactive_green, g_settings.menu_Content_inactive_blue),
				convertSetupColor2RGB(g_settings.menu_Content_inactive_Text_red, g_settings.menu_Content_inactive_Text_green, g_settings.menu_Content_inactive_Text_blue),
				8, convertSetupAlpha2Alpha(g_settings.menu_Content_inactive_alpha) );

			g_FrameBuffer->paletteGenFade(COL_INFOBAR,
				convertSetupColor2RGB(g_settings.infobar_red, g_settings.infobar_green, g_settings.infobar_blue),
				convertSetupColor2RGB(g_settings.infobar_Text_red, g_settings.infobar_Text_green, g_settings.infobar_Text_blue),
				8, convertSetupAlpha2Alpha(g_settings.infobar_alpha) );

			g_FrameBuffer->paletteSetColor( COL_INFOBAR_SHADOW,
							convertSetupColor2RGB(
								int(g_settings.infobar_red*0.4),
								int(g_settings.infobar_green*0.4),
								int(g_settings.infobar_blue*0.4)),
                                    g_settings.infobar_alpha);

			g_FrameBuffer->paletteSet();
    return false;
};

bool CAudioSetupNotifier::changeNotify(string OptionName)
{
	printf("notify: %s\n", OptionName.c_str() );
    return false;
};

bool CVideoSetupNotifier::changeNotify(string OptionName)
{
	if(OptionName=="videomenu.videosignal")
	{
		g_Controld->setVideoOutput( g_settings.video_Signal );
	}
	else if(OptionName=="videomenu.videoformat")
	{
		g_Controld->setVideoFormat( g_settings.video_Format );
	}
	
	printf("video notify: %s\n", OptionName.c_str() );
    return false;
};


void setNetworkAddress(char* ip, char* netmask, char* broadcast)
{
	printf("IP       : %s\n", ip);
	printf("Netmask  : %s\n", netmask);
	printf("Broadcast: %s\n", broadcast);
	if(fork()==0)
	{
		if (execlp("ifconfig", "ifconfig", "eth0", "up", ip, "netmask", netmask, "broadcast", broadcast, 0)<0)
		{
			perror("exec failed - ifconfig\n");
		}
	}
}

void setDefaultGateway(char* ip)
{
	if(fork()==0)
	{
	    if (execlp("route", "route", "add", "-net", "default", "gw", ip, 0)<0)
		{
			perror("exec failed - route\n");
		}
	}
}

void setNameServer(char* ip)
{
    FILE* fd = fopen("/etc/resolv.conf", "w");
    if(fd)
	{
		fprintf(fd, "# resolv.conf - generated by neutrino\n\n");
		fprintf(fd, "nameserver %s\n", ip);
		fclose(fd);
	}
	else
	{
		perror("cannot write /etc/resolv.conf");
	}
};

bool CLanguageSetupNotifier::changeNotify(string OptionName)
{
//	printf("language notify: %s - %s\n", OptionName.c_str(), g_settings.language );
    g_Locale->loadLocale(g_settings.language);
    return true;
};

bool CKeySetupNotifier::changeNotify(string OptionName)
{
//    printf("CKeySetupNotifier notify: %s\n", OptionName.c_str() );
    g_RCInput->repeat_block = atoi(g_settings.repeat_blocker)* 1000;
    return false;
};

int CAPIDChangeExec::exec(CMenuTarget* parent, string actionKey)
{
//    printf("CAPIDChangeExec exec: %s\n", actionKey.c_str());
    g_RemoteControl->setAPID(atoi(actionKey.c_str()));
    return RETURN_EXIT;
};

int CNVODChangeExec::exec(CMenuTarget* parent, string actionKey)
{
//    printf("CAPIDChangeExec exec: %s\n", actionKey.c_str());
    g_RemoteControl->setAPID(atoi(actionKey.c_str()));
    return RETURN_EXIT;
};

