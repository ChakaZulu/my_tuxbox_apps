.TH "dvbsnoop" "1" "" "Rainer Scherg (rasc)" "DVB Analyzer, MPEG Analyzer"
.SH "Name"
.br
dvbsnoop \- DVB and MPEG stream analyzer
.SH "SYNOPSIS"
.B dvbsnoop [\-s mode] [options] pid

.B dvbsnoop [\-s mode] [options] \-if filename [pid]

.B dvbsnoop [\-s mode] [options] \-b [pid]   > binary.file

.B dvbsnoop [\-s mode] [options] 


.SH "Description"
.br
DVBSNOOP is a text based DVB and MPEG stream analyzer for viewing/debugging stream information, e.g. send via digital TV. You may also use dvbsnoop to analyze mpeg compliant streams stored on DVD or other media.  Dvbsnoop analyzes and displays MPEG, DVB, DSM\-CC, MHP, etc. data and structures in human readable form. Possible stream types are TS (tranport streams), PES (packetized elementary streams) or SECTIONS (service information streams).

DVBSNOOP also has some additional functionallity to analyze receiver (set top box, dvb card) data, bandwidth of a transport stream, pid scan, etc.


.SH "Usage "
.br
Dvbsnoop provides an online and offline input and different snoop/decoding modes (see below).

Using dvbsnoop 'online' requires dvb\-api compliant devices (http://www.linuxtv.org) to grab live stream information from e.g. satellite or cable tv or data streams. You will also need DVB compliant hardware (e.g. DVB\-S pci card or a linux based setop box like dbox2 or Dreambox) to receive DVB data streams. To tune into a transponder or frequency, please use a program like 'szap', 'dvbtune' or a DVB-GUI like 'Enigma' or 'Neutrino'.

The 'offline' mode enables you to analyze binary stream files (e.g. transport stream files or PES files).

Some options are specific for the selected modes. You may try different combinations of command line options to get best results.

A short FAQ for common questions and example decoding output can be found at http://dvbsnoop.sourceforge.net.


.SH "Basic Decoding Selection Mode Command Line Options"
.br
.TP
.B \-s [ts|pes|sec|pidscan|bandwidth|signal|feinfo]
.br
 Basic snoop mode selection.
   sec      \= SI mode (SECTIONS)
   ts       \= transport stream mode
   pes      \= packetized elementary stream mode,
               e.g. teletext, audio, video, data
   pidscan  \= scan and display PIDs on tuned
               transponder/frequency.
   bandwith \= bandwidth messurement mode
               for selected pid.
   signal   \= display tuner signal reception info.
   feinfo   \= display tuner data (frontend info).
   
The modes 'sec' and "pes" require the selection of a PID.
The mode 'ts' requires either a PID specified or the option \-tsraw.

A PID can be specified using octal, decimal or hexadecimal values.
Examples:  octal: 021, decimal: 17, hexadecimal: 0x11

If \-s option is omitted, default mode is "\-s sec" (Section mode).


.SH "General Command Line Options"
.br
.TP 
.B \-help
.br
Print help text with command line options.
.TP 
.B \-hideproginfo
Do not print dvbsnoop header (version, etc.).


.SH "General Decoding Output Command Line Options"
.br
.TP
.B \-pd \<mode\>
.br
Specify print decoding verbose mode. Specify 0 for no output.
9 will be very verbose. Default is 6.
.TP
.B \-npd
.br
Same as \-pd 0.

.TP
.B \-ph \<mode\>
.br
Specify print hex putput verbose mode:
 0\=no hexdump output, 1\=hex output, 2\=hex line,
 3\=ascii line, 4\=alternate hex output. (default is 4) 
.TP
.B \-hexdumpbuffer
.TP
.B \-nohexdumpbuffer
.br
Switch on/off hexdump of stream input buffer. 
May be used to enhance \-ph option. (e.g. \-ph 4 \-nohexdumpbuffer)
.TP
.B \-nph
.br
Obsolete, same as \-nohexdumpbuffer.

.TP
.B \-t\<mode\>
.br
Timestamp output mode:
   \-tf \= full timestamp
   \-td \= delta timestamp mode,
   \-tn \= no time stamp.

.TP
.B \-b
.br
Binary output of packets (disables other output).
Use this option to store raw data in file or chain data to another program.
   E.g.:  dvbsnoop \-s ts 0x00 \-b > file
          dvbsnoop \-s pes 0x3FF \-b 
| ./myprogram 

There might be a file limit on your system (mostly 2 GB) when writing files using '>'.


.SH "Device Selection Command Line Options"
.br
Dvbsnoop uses default devices, defined by the DVB API.
On some platforms or if using multiple dvb cards, you may want to override default settings, e.g. to select a different tuner. 
.TP
.B \-demux \<device\>
.br
Specify \<device\> for demux.
If not specified, dvbsnoop uses the device specified by the linux  dvb\-api.
.TP
.B \-dvr \<device\>
.br
Specify \<device\> for dvr.
If not specified, dvbsnoop uses the device specified by the linux  dvb\-api.
.TP
.B \-frontend \<device\>
.br
Specify \<device\> for frontend.
If not specified, dvbsnoop uses the device specified by the linux  dvb\-api.
.TP
.B \-adapter \<n\>
.br
Specify DVB adapter/card by number <n> (0-9) using default path pattern 
(e.g. /dev/dvb/adapter1/...). If not specified, dvbsnoop uses the default adapter/card - usually 0.
.TP
.B \-devnr \<n\>
.br
Specify DVB device number <n> (0-9) on a DVB adapter/card using default path pattern
(e.g. /dev/dvb/adapt.../demux1). If not specified, dvbsnoop uses the default device number - usually 0.

.TP
.B \-buffersize \<kb\>
.br
Set demux read buffersize in KBytes.
Default is 0 (use internal default value).

.TP
.B \-n \<value\>
.br
Stop after reading \<value\> packets. Use this to limit the read process.
Default is 0 (no limit).

.TP
.B \-if \<file\>
.br
Read binary stream data from file instead of the demux device.
Depending on the decoding mode this might be transport stream, packetized elemtary stream or sections.
Ensure packet sync by using \-sync option.
  <file> \= '-' reads from standard input.


.SH "SECTION Mode (SEC) Specific Command Line Options"
.br
The following command line options are special to the 'SECTION' decoding mode:
.TP
.B \-timeout \<ms\>
.br
section read timeout in ms. Default is 0 (no timeout).
.TP
.B \-f \<filter\>
.br
Filter value for filtering section data e.g. table id's.
Value may be decimal (49), octal (037) or hexadecimal (0x4F).
You may use multibyte filters like: 0x4E.01.20.FF
The filter comprises e.g. 16 bytes covering byte 0 and byte 3..17 in a section,
thus excluding bytes 1 and 2 (the length field of a section).
To check the filtervalues use \-pd 9.
.TP
.B \-m \<mask\>
.br
Mask value to use for filters.
Value may be decimal (49), octal (037) or hexadecimal (0x4F).
You may use multibyte filters like: 0xFF.F0.FE.FF
The filter comprises e.g. 16 bytes covering byte 0 and byte 3..17 in a section,
thus excluding bytes 1 and 2 (the length field of a section).
To check the filtervalues use \-pd 9.

.TP
.B \-N \<value\>
.br
Stop after decoding \<value\> packets. Use this to limit the packet decoding process.
Useful, when reading stream data from file.  \-n limits the read packet process, \-N
limits the decoding process. Using dvb hardware filters \-n would be the same as \-N.
Default is 0 (no limit).

.TP
.B \-crc 
.br
Do CRC checking, when reading section data. 
Default is off. This is only supported, if your DVB hardware/firmware supports CRC checking.
.TP
.B \-nocrc
.br
Don't do hardware/firmware CRC, when reading section data  (default).
Some DVB sections do not have proper CRC set!

.TP
.B \-softcrc
.br
Do soft CRC checking, when reading section data.
Hardware/firmware CRC should be preferred. Default is \-nosoftcrc.
.TP
.B \-nosoftcrc
.br
Don't do soft CRC, when reading sections. (default)

.TP
.B \-spiderpid
.br
Snoop referenced section PIDs.
This option recursivly reads all PIDs referenced by a section. This option also sets number of packets to be read to 1 (sets \-n 1).
.TP
.B \-privateprovider \<id\>
.br
Set provider \<id\> string for decoding of special private tables and descriptors. Use \-help to display provider currently supported. If omitted, private data will be displayed as hexdump depending on \-ph option. (If you have information on private data structures, currently not supported by dvbsnoop, please let us know!)


.SH "Transport Stream (TS) Mode Specific Command Line Options"
.br
The following command line options are special to the 'Transport Stream'  decoding mode:
.TP
.B \-sync
.br
Do simple packet header sync when reading transport streams.
This option enforces sync byte aligning (default) ans is normally
done by receiption hardware/firmware.
.TP
.B \-nosync
.br
Switch off packet header sync when reading transport streams.
Switching of packet sync may result in odd decoding results or
even dvbsnoop crashes. This may not work on some hardware.

.TP
.B \-tssubdecode
.br
Sub\-decode SECTION data or PES data from transport stream decoding. This reads transport stream packets and tries to decode its content.

.TP
.B \-tsraw
.br
Read full transport stream (all pids).
Your hardware/firmware has to support this mode.

.TP
.B \-N \<value\>
.br
Stop after decoding \<value\> packets. Use this to limit the packet decoding process.
Useful, when reading stream data from file.  \-n limits the read packet process, \-N
limits the decoding process. Using dvb hardware filters \-n would be the same as \-N.
Default is 0 (no limit).


.SH "PES Mode (PES) Specific Command Line Options"
.br
The following command line options are special to the 'PES' (packetized elementary stream) decoding mode:
.TP
.B \-sync
.br
Do simple packet header sync when reading PES data.
This option enforces sync byte aligning (default) ans is normally
done by receiption hardware/firmware.
.TP
.B \-nosync
.br
Switch off packet header sync when reading PES data.
Switching of packet sync may result in odd decoding results or
even dvbsnoop crashes. This may not work on some hardware.


.SH "PID Scan Mode Specific Command Line Options"
.br
The following command line options are special to the 'PID Scan' discovery mode:
.TP
.B \-maxdmx \<n\>
.br
Set maximum use of DMX filters.
Default is 0 (use all possible filters).


.SH "Bandwidth Mode Specific Command Line Options"
.br
There are no special command line options for the 'Bandwidth' display mode.


.SH "Signal Mode Specific Command Line Options"
.br
There are no special command line options for the 'Signal Strength'  display mode.
.TP
.B \-timeout \<ms\>
.br
Poll timing in msec. 


.SH "Frontend Info Mode Specific Command Line Options"
.br
There are no special command line options for the 'Frontend Info' display  mode.
.TP
.br


.SH "Examples"
.br
Display EPG, 10 sections:
   dvbsnoop \-s sec \-nph  \-n 10  0x12
   dvbsnoop \-s sec \-ph 3 \-n 10 -crc  0x12

Display sections tree (1 packet each) using private provider data:
   dvbsnoop \-s sec \-spiderpid \-privateprovider premiere.de  0x00

Display PAT transport stream (ts) and do subdecoding of sections and descriptors:
   dvbsnoop \-s ts \-pd 4 \-tssubdecode \-nph  0x00

Read PES (e.g. Videotext, Video, Audio) stream:
   dvbsnoop \-s pes 0x28F
   dvbsnoop \-s pes 0x28F -sync -b > pes.bin.file

Read PS from file and do not show hex dump:
   dvbsnoop -if hdtv_ps_file.mpg -s ps -ph 0 -nohexdumpbuffer -n 30

Show current signal strength:
   dvbsnoop \-s signal
   dvbsnoop \-s signal \-pd 9 \-n 100 -timeout 100

Show bandwidth usage of a PID  0x1FF:
   dvbsnoop \-s bandwidth \-n 1000 \-pd 2 0x1FF
   dvbsnoop \-s bandwidth \-buffersize 256 \-n 1000  0x1FF

Do PID scan of a tuned transponder (different display levels):
   dvbsnoop \-s pidscan \-pd 1
   dvbsnoop \-s pidscan \-pd 6
   dvbsnoop \-s pidscan \-pd 9 \-maxdmx 12 

Show frontend info:
   dvbsnoop \-s feinfo \-pd 9

Try to scan all sections, read 2 packets per PID:
   dvbsnoop \-nohexdumpbuffer \-spiderpid \-n 2  0x0000

Save 1000 packets of a transport stream to a file:
   dvbsnoop \-b \-n 1000 \-s ts  0x200  > ts_file.pid0x200.bin
   dvbsnoop \-b \-n 1000 \-s ts -tsraw  > ts_file.bin

Read transport stream (ts) from file and decode:
   dvbsnoop \-s ts \-if ts_stream.bin  -sync
   dvbsnoop \-s ts \-if ts_file.pid0x200.bin -sync  0x200

Simple filter for some PID values, some examples:
   dvbsnoop \-n 5 \-nph 0x00 | grep \-i "PID: "
   dvbsnoop \-spiderpid \-nph \-n 10  0x00 | grep \-i "PID: " | sort | uniq
   dvbsnoop \-s signal \-pd 9 | ./perl-statistics-prog.pl
   
Other simple filter examples:
   dvbsnoop \-s sec \-f 0x4E \-m 0xFF  0x12
   dvbsnoop \-s sec \-f 0x4E.34.00 \-m 0xFF.FF.0F  0x12
   dvbsnoop \-s sec \-f 16.00 \-m 255.255  0x12
   dvbsnoop \-s sec \-nph \-n 5 0x10 | grep \-i "frequency"

Selecting devices:
   dvbsnoop \-s feinfo -pd 9 -frontend /dev/dvb/adapter0/frontend1
   dvbsnoop \-s feinfo -pd 9 -adapter 0 -devnr 1
   dvbsnoop \-s feinfo -pd 9 -adapter 2

... for more examples and example output of dvbsnoop, please visit http://dvbsnoop.sourceforge.net.


.SH NOTES 
.br
dvbsnoop tries to decode all of the data it receives, e.g. if you try
to decode a video or audio stream in section mode, dvbsnoop may assume
a section table and will decode the data wrong. In this case the decoding
will be garbage. Using the '-crc' option should prevent this
(if supported at the hardware/driver level). Also, the '-sync' option
is very helpful when using '-s pes' or '-s ts'. The '-sync' option tries
to find TS or PES packet start sync bytes before decoding. 
.br
.br
dvbsnoop does not do DVB stream validation.
dvbsnoop assumes correct DVB streams. Corrupted streams or streams with
wrong semantics (e.g. incorrect length information) will result in
wrong decoding output. For this reason, the use of '-crc' and '-sync'
options is strongly recommended. 
.br
Depending on the firmware of your dvb card, dvbsnoop may not be able to sniff on pids,
which are occupied by other processes. This is no bug, this is a driver/firmware issue.


.SH "BUGS"
Please check http://dvbsnoop.sourceforge.net for bug reports.


.SH SEE ALSO
.BR dvbtune 
(1),
.BR dvbstream
(1).
.br


.SH "Acknowledgments"
DVBSNOOP was written by Rainer Scherg (rasc).
.br
Copyright (c) 2001-2005  Rainer Scherg
.br

Additional patches and bugfixes/\-reports were provided by members of the tuxbox project \- bringing digital TV to linux based set top boxes (e.g. "dbox2" digital tv receiver) and also by users of dvbsnoop (see the ChangeLog file for credits).

For more information about DVBSNOOP please visit 'http://dvbsnoop.sourceforge.net'.


